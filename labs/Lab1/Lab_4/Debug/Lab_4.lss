
Lab_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000258  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000288  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001359  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000933  00000000  00000000  000016a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000998  00000000  00000000  00001fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000013c  00000000  00000000  00002970  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000470  00000000  00000000  00002aac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000abd  00000000  00000000  00002f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000039d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	93 c0       	rjmp	.+294    	; 0x13c <__vector_5>
  16:	00 00       	nop
  18:	a5 c0       	rjmp	.+330    	; 0x164 <__vector_6>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ee       	ldi	r30, 0xE4	; 228
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 30       	cpi	r26, 0x02	; 2
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	8d d0       	rcall	.+282    	; 0x1de <main>
  c4:	8d c0       	rjmp	.+282    	; 0x1e0 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_sec>:
		}
	}
}
int tas=0;
void delay_sec(int sec)
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	00 d0       	rcall	.+0      	; 0xce <delay_sec+0x6>
  ce:	00 d0       	rcall	.+0      	; 0xd0 <delay_sec+0x8>
  d0:	00 d0       	rcall	.+0      	; 0xd2 <delay_sec+0xa>
  d2:	cd b7       	in	r28, 0x3d	; 61
  d4:	de b7       	in	r29, 0x3e	; 62
	volatile int i,j,k;
	for (k=0; k<sec; k++)
  d6:	1e 82       	std	Y+6, r1	; 0x06
  d8:	1d 82       	std	Y+5, r1	; 0x05
  da:	22 c0       	rjmp	.+68     	; 0x120 <delay_sec+0x58>
	for (i=0; i<2000; i++)
  dc:	1a 82       	std	Y+2, r1	; 0x02
  de:	19 82       	std	Y+1, r1	; 0x01
  e0:	14 c0       	rjmp	.+40     	; 0x10a <delay_sec+0x42>
	for (j=0; j<90; j++);
  e2:	1c 82       	std	Y+4, r1	; 0x04
  e4:	1b 82       	std	Y+3, r1	; 0x03
  e6:	06 c0       	rjmp	.+12     	; 0xf4 <delay_sec+0x2c>
  e8:	2b 81       	ldd	r18, Y+3	; 0x03
  ea:	3c 81       	ldd	r19, Y+4	; 0x04
  ec:	2f 5f       	subi	r18, 0xFF	; 255
  ee:	3f 4f       	sbci	r19, 0xFF	; 255
  f0:	3c 83       	std	Y+4, r19	; 0x04
  f2:	2b 83       	std	Y+3, r18	; 0x03
  f4:	2b 81       	ldd	r18, Y+3	; 0x03
  f6:	3c 81       	ldd	r19, Y+4	; 0x04
  f8:	2a 35       	cpi	r18, 0x5A	; 90
  fa:	31 05       	cpc	r19, r1
  fc:	ac f3       	brlt	.-22     	; 0xe8 <delay_sec+0x20>
int tas=0;
void delay_sec(int sec)
{
	volatile int i,j,k;
	for (k=0; k<sec; k++)
	for (i=0; i<2000; i++)
  fe:	29 81       	ldd	r18, Y+1	; 0x01
 100:	3a 81       	ldd	r19, Y+2	; 0x02
 102:	2f 5f       	subi	r18, 0xFF	; 255
 104:	3f 4f       	sbci	r19, 0xFF	; 255
 106:	3a 83       	std	Y+2, r19	; 0x02
 108:	29 83       	std	Y+1, r18	; 0x01
 10a:	29 81       	ldd	r18, Y+1	; 0x01
 10c:	3a 81       	ldd	r19, Y+2	; 0x02
 10e:	20 3d       	cpi	r18, 0xD0	; 208
 110:	37 40       	sbci	r19, 0x07	; 7
 112:	3c f3       	brlt	.-50     	; 0xe2 <delay_sec+0x1a>
}
int tas=0;
void delay_sec(int sec)
{
	volatile int i,j,k;
	for (k=0; k<sec; k++)
 114:	2d 81       	ldd	r18, Y+5	; 0x05
 116:	3e 81       	ldd	r19, Y+6	; 0x06
 118:	2f 5f       	subi	r18, 0xFF	; 255
 11a:	3f 4f       	sbci	r19, 0xFF	; 255
 11c:	3e 83       	std	Y+6, r19	; 0x06
 11e:	2d 83       	std	Y+5, r18	; 0x05
 120:	2d 81       	ldd	r18, Y+5	; 0x05
 122:	3e 81       	ldd	r19, Y+6	; 0x06
 124:	28 17       	cp	r18, r24
 126:	39 07       	cpc	r19, r25
 128:	cc f2       	brlt	.-78     	; 0xdc <delay_sec+0x14>
	for (i=0; i<2000; i++)
	for (j=0; j<90; j++);
}
 12a:	26 96       	adiw	r28, 0x06	; 6
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	f8 94       	cli
 130:	de bf       	out	0x3e, r29	; 62
 132:	0f be       	out	0x3f, r0	; 63
 134:	cd bf       	out	0x3d, r28	; 61
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	08 95       	ret

0000013c <__vector_5>:

ISR(INT4_vect)
{
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	8f 93       	push	r24
 148:	9f 93       	push	r25
	tas=1;
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 152:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <__vector_6>:
ISR(INT5_vect)
{
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
 16e:	8f 93       	push	r24
 170:	9f 93       	push	r25
	tas=2;
 172:	82 e0       	ldi	r24, 0x02	; 2
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 17a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 17e:	9f 91       	pop	r25
 180:	8f 91       	pop	r24
 182:	0f 90       	pop	r0
 184:	0f be       	out	0x3f, r0	; 63
 186:	0f 90       	pop	r0
 188:	1f 90       	pop	r1
 18a:	18 95       	reti

0000018c <tasal>:
void tasal(){
	DDRA=0xff;
 18c:	8f ef       	ldi	r24, 0xFF	; 255
 18e:	8a bb       	out	0x1a, r24	; 26
	DDRE=0x00;
 190:	12 b8       	out	0x02, r1	; 2
	SREG =0x80;
 192:	80 e8       	ldi	r24, 0x80	; 128
 194:	8f bf       	out	0x3f, r24	; 63
	EIMSK=0x30;
 196:	80 e3       	ldi	r24, 0x30	; 48
 198:	89 bf       	out	0x39, r24	; 57
	EICRB=0x00;
 19a:	1a be       	out	0x3a, r1	; 58
	for(;;){
		if(tas==1){
 19c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	39 f4       	brne	.+14     	; 0x1b6 <tasal+0x2a>
			if(PORTA>=128){
 1a8:	df 9b       	sbis	0x1b, 7	; 27
 1aa:	03 c0       	rjmp	.+6      	; 0x1b2 <tasal+0x26>
				PORTA = 0x0f;
 1ac:	8f e0       	ldi	r24, 0x0F	; 15
 1ae:	8b bb       	out	0x1b, r24	; 27
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <tasal+0x2a>
				}else{
				PORTA = 0xf0;
 1b2:	80 ef       	ldi	r24, 0xF0	; 240
 1b4:	8b bb       	out	0x1b, r24	; 27
			}
		}
		if(tas==2){
 1b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ba:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1be:	02 97       	sbiw	r24, 0x02	; 2
 1c0:	51 f4       	brne	.+20     	; 0x1d6 <tasal+0x4a>
			if(PORTA<=1){
 1c2:	8b b3       	in	r24, 0x1b	; 27
 1c4:	82 30       	cpi	r24, 0x02	; 2
 1c6:	18 f4       	brcc	.+6      	; 0x1ce <tasal+0x42>
				PORTA = 3;
 1c8:	83 e0       	ldi	r24, 0x03	; 3
 1ca:	8b bb       	out	0x1b, r24	; 27
 1cc:	04 c0       	rjmp	.+8      	; 0x1d6 <tasal+0x4a>
				}else{
				PORTA *=4;
 1ce:	8b b3       	in	r24, 0x1b	; 27
 1d0:	88 0f       	add	r24, r24
 1d2:	88 0f       	add	r24, r24
 1d4:	8b bb       	out	0x1b, r24	; 27
			}
		}
		delay_sec(1);
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	76 df       	rcall	.-276    	; 0xc8 <delay_sec>
	}
 1dc:	df cf       	rjmp	.-66     	; 0x19c <tasal+0x10>

000001de <main>:
	//test();
	//tasaldal();
	//daalgawar();
	//tasaldal();
	//da1();
	tasal();
 1de:	d6 df       	rcall	.-84     	; 0x18c <tasal>

000001e0 <_exit>:
 1e0:	f8 94       	cli

000001e2 <__stop_program>:
 1e2:	ff cf       	rjmp	.-2      	; 0x1e2 <__stop_program>
