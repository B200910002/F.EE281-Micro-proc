
Lab_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000020a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000020a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d34  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000088e  00000000  00000000  00000ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000575  00000000  00000000  00001882  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  00001df8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000438  00000000  00000000  00001e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005d3  00000000  00000000  000022d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  000028a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	8b d0       	rcall	.+278    	; 0x1b0 <main>
  9a:	8b c0       	rjmp	.+278    	; 0x1b2 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <blink>:
				PORTC=tel_num[i+3]; PORTG=0x01; _delay_ms(50);
			}
		}
	}
}
void blink(){
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	cd b7       	in	r28, 0x3d	; 61
  a4:	de b7       	in	r29, 0x3e	; 62
  a6:	6a 97       	sbiw	r28, 0x1a	; 26
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	f8 94       	cli
  ac:	de bf       	out	0x3e, r29	; 62
  ae:	0f be       	out	0x3f, r0	; 63
  b0:	cd bf       	out	0x3d, r28	; 61
	char tel_num[26] = {0x00, 0x00, 0x00, 0x00,
  b2:	fe 01       	movw	r30, r28
  b4:	31 96       	adiw	r30, 0x01	; 1
  b6:	8a e1       	ldi	r24, 0x1A	; 26
  b8:	df 01       	movw	r26, r30
  ba:	1d 92       	st	X+, r1
  bc:	8a 95       	dec	r24
  be:	e9 f7       	brne	.-6      	; 0xba <blink+0x1c>
  c0:	9f e6       	ldi	r25, 0x6F	; 111
  c2:	9d 83       	std	Y+5, r25	; 0x05
  c4:	8d e6       	ldi	r24, 0x6D	; 109
  c6:	8e 83       	std	Y+6, r24	; 0x06
  c8:	8f 83       	std	Y+7, r24	; 0x07
  ca:	86 e0       	ldi	r24, 0x06	; 6
  cc:	88 87       	std	Y+8, r24	; 0x08
  ce:	2b e5       	ldi	r18, 0x5B	; 91
  d0:	29 87       	std	Y+9, r18	; 0x09
  d2:	9a 87       	std	Y+10, r25	; 0x0a
  d4:	8b 87       	std	Y+11, r24	; 0x0b
  d6:	8c 87       	std	Y+12, r24	; 0x0c
  d8:	86 e7       	ldi	r24, 0x76	; 118
  da:	89 8b       	std	Y+17, r24	; 0x11
  dc:	89 e7       	ldi	r24, 0x79	; 121
  de:	8a 8b       	std	Y+18, r24	; 0x12
  e0:	98 e3       	ldi	r25, 0x38	; 56
  e2:	9b 8b       	std	Y+19, r25	; 0x13
  e4:	93 e7       	ldi	r25, 0x73	; 115
  e6:	9c 8b       	std	Y+20, r25	; 0x14
  e8:	93 e3       	ldi	r25, 0x33	; 51
  ea:	9e 8b       	std	Y+22, r25	; 0x16
  ec:	97 e2       	ldi	r25, 0x27	; 39
  ee:	9f 8b       	std	Y+23, r25	; 0x17
  f0:	88 8f       	std	Y+24, r24	; 0x18
						0x00, 0x00, 0x00, 0x00,
						0x76, 0x79, 0x38, 0x73, 		
						0x00,						    
						0x33, 0x27, 0x79, 0x00
	};
	DDRC=0xff;
  f2:	8f ef       	ldi	r24, 0xFF	; 255
  f4:	84 bb       	out	0x14, r24	; 20
	DDRG=0x0f;
  f6:	8f e0       	ldi	r24, 0x0F	; 15
  f8:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	while (1) {
		for(int i=0; i<23; i++) {
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	53 c0       	rjmp	.+166    	; 0x1a8 <blink+0x10a>
			for(int j=0; j<1000; j++) {
				PORTC=tel_num[i]; PORTG=0x08; _delay_ms(1);
 102:	e1 e0       	ldi	r30, 0x01	; 1
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	ec 0f       	add	r30, r28
 108:	fd 1f       	adc	r31, r29
 10a:	e8 0f       	add	r30, r24
 10c:	f9 1f       	adc	r31, r25
 10e:	40 81       	ld	r20, Z
 110:	45 bb       	out	0x15, r20	; 21
 112:	e5 e6       	ldi	r30, 0x65	; 101
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	48 e0       	ldi	r20, 0x08	; 8
 118:	40 83       	st	Z, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11a:	a9 ef       	ldi	r26, 0xF9	; 249
 11c:	b0 e0       	ldi	r27, 0x00	; 0
 11e:	11 97       	sbiw	r26, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <blink+0x80>
 122:	00 c0       	rjmp	.+0      	; 0x124 <blink+0x86>
 124:	00 00       	nop
				PORTC=tel_num[i+1]; PORTG=0x04; _delay_ms(1);
 126:	dc 01       	movw	r26, r24
 128:	11 96       	adiw	r26, 0x01	; 1
 12a:	41 e0       	ldi	r20, 0x01	; 1
 12c:	50 e0       	ldi	r21, 0x00	; 0
 12e:	4c 0f       	add	r20, r28
 130:	5d 1f       	adc	r21, r29
 132:	a4 0f       	add	r26, r20
 134:	b5 1f       	adc	r27, r21
 136:	4c 91       	ld	r20, X
 138:	45 bb       	out	0x15, r20	; 21
 13a:	44 e0       	ldi	r20, 0x04	; 4
 13c:	40 83       	st	Z, r20
 13e:	a9 ef       	ldi	r26, 0xF9	; 249
 140:	b0 e0       	ldi	r27, 0x00	; 0
 142:	11 97       	sbiw	r26, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <blink+0xa4>
 146:	00 c0       	rjmp	.+0      	; 0x148 <blink+0xaa>
 148:	00 00       	nop
				PORTC=tel_num[i+2]; PORTG=0x02; _delay_ms(1);
 14a:	dc 01       	movw	r26, r24
 14c:	12 96       	adiw	r26, 0x02	; 2
 14e:	41 e0       	ldi	r20, 0x01	; 1
 150:	50 e0       	ldi	r21, 0x00	; 0
 152:	4c 0f       	add	r20, r28
 154:	5d 1f       	adc	r21, r29
 156:	a4 0f       	add	r26, r20
 158:	b5 1f       	adc	r27, r21
 15a:	4c 91       	ld	r20, X
 15c:	45 bb       	out	0x15, r20	; 21
 15e:	42 e0       	ldi	r20, 0x02	; 2
 160:	40 83       	st	Z, r20
 162:	a9 ef       	ldi	r26, 0xF9	; 249
 164:	b0 e0       	ldi	r27, 0x00	; 0
 166:	11 97       	sbiw	r26, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <blink+0xc8>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <blink+0xce>
 16c:	00 00       	nop
				PORTC=tel_num[i+3]; PORTG=0x01; _delay_ms(1);
 16e:	dc 01       	movw	r26, r24
 170:	13 96       	adiw	r26, 0x03	; 3
 172:	41 e0       	ldi	r20, 0x01	; 1
 174:	50 e0       	ldi	r21, 0x00	; 0
 176:	4c 0f       	add	r20, r28
 178:	5d 1f       	adc	r21, r29
 17a:	a4 0f       	add	r26, r20
 17c:	b5 1f       	adc	r27, r21
 17e:	4c 91       	ld	r20, X
 180:	45 bb       	out	0x15, r20	; 21
 182:	41 e0       	ldi	r20, 0x01	; 1
 184:	40 83       	st	Z, r20
 186:	a9 ef       	ldi	r26, 0xF9	; 249
 188:	b0 e0       	ldi	r27, 0x00	; 0
 18a:	11 97       	sbiw	r26, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <blink+0xec>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <blink+0xf2>
 190:	00 00       	nop
	};
	DDRC=0xff;
	DDRG=0x0f;
	while (1) {
		for(int i=0; i<23; i++) {
			for(int j=0; j<1000; j++) {
 192:	2f 5f       	subi	r18, 0xFF	; 255
 194:	3f 4f       	sbci	r19, 0xFF	; 255
 196:	02 c0       	rjmp	.+4      	; 0x19c <blink+0xfe>
 198:	20 e0       	ldi	r18, 0x00	; 0
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	28 3e       	cpi	r18, 0xE8	; 232
 19e:	b3 e0       	ldi	r27, 0x03	; 3
 1a0:	3b 07       	cpc	r19, r27
 1a2:	0c f4       	brge	.+2      	; 0x1a6 <blink+0x108>
 1a4:	ae cf       	rjmp	.-164    	; 0x102 <blink+0x64>
						0x33, 0x27, 0x79, 0x00
	};
	DDRC=0xff;
	DDRG=0x0f;
	while (1) {
		for(int i=0; i<23; i++) {
 1a6:	01 96       	adiw	r24, 0x01	; 1
 1a8:	87 31       	cpi	r24, 0x17	; 23
 1aa:	91 05       	cpc	r25, r1
 1ac:	ac f3       	brlt	.-22     	; 0x198 <blink+0xfa>
 1ae:	a6 cf       	rjmp	.-180    	; 0xfc <blink+0x5e>

000001b0 <main>:
{
	//test();
	//test2();
	//phoneNumber();
	//helpMe();
	blink();
 1b0:	76 df       	rcall	.-276    	; 0x9e <blink>

000001b2 <_exit>:
 1b2:	f8 94       	cli

000001b4 <__stop_program>:
 1b4:	ff cf       	rjmp	.-2      	; 0x1b4 <__stop_program>
